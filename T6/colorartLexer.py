# Generated from colorart.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,21,163,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,
        1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,
        1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,
        1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,
        1,15,1,16,1,16,5,16,134,8,16,10,16,12,16,137,9,16,1,17,1,17,1,17,
        1,17,1,18,4,18,144,8,18,11,18,12,18,145,1,19,4,19,149,8,19,11,19,
        12,19,150,1,19,1,19,1,20,1,20,5,20,157,8,20,10,20,12,20,160,9,20,
        1,20,1,20,0,0,21,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,1,
        0,6,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,48,57,
        65,70,97,102,1,0,48,57,3,0,9,10,13,13,32,32,2,0,10,10,13,13,166,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
        1,0,0,0,1,43,1,0,0,0,3,45,1,0,0,0,5,47,1,0,0,0,7,54,1,0,0,0,9,60,
        1,0,0,0,11,67,1,0,0,0,13,77,1,0,0,0,15,84,1,0,0,0,17,89,1,0,0,0,
        19,96,1,0,0,0,21,102,1,0,0,0,23,109,1,0,0,0,25,114,1,0,0,0,27,119,
        1,0,0,0,29,122,1,0,0,0,31,129,1,0,0,0,33,131,1,0,0,0,35,138,1,0,
        0,0,37,143,1,0,0,0,39,148,1,0,0,0,41,154,1,0,0,0,43,44,5,59,0,0,
        44,2,1,0,0,0,45,46,5,61,0,0,46,4,1,0,0,0,47,48,5,99,0,0,48,49,5,
        97,0,0,49,50,5,110,0,0,50,51,5,118,0,0,51,52,5,97,0,0,52,53,5,115,
        0,0,53,6,1,0,0,0,54,55,5,99,0,0,55,56,5,111,0,0,56,57,5,108,0,0,
        57,58,5,111,0,0,58,59,5,114,0,0,59,8,1,0,0,0,60,61,5,99,0,0,61,62,
        5,105,0,0,62,63,5,114,0,0,63,64,5,99,0,0,64,65,5,108,0,0,65,66,5,
        101,0,0,66,10,1,0,0,0,67,68,5,114,0,0,68,69,5,101,0,0,69,70,5,99,
        0,0,70,71,5,116,0,0,71,72,5,97,0,0,72,73,5,110,0,0,73,74,5,103,0,
        0,74,75,5,108,0,0,75,76,5,101,0,0,76,12,1,0,0,0,77,78,5,115,0,0,
        78,79,5,113,0,0,79,80,5,117,0,0,80,81,5,97,0,0,81,82,5,114,0,0,82,
        83,5,101,0,0,83,14,1,0,0,0,84,85,5,108,0,0,85,86,5,105,0,0,86,87,
        5,110,0,0,87,88,5,101,0,0,88,16,1,0,0,0,89,90,5,114,0,0,90,91,5,
        97,0,0,91,92,5,100,0,0,92,93,5,105,0,0,93,94,5,117,0,0,94,95,5,115,
        0,0,95,18,1,0,0,0,96,97,5,119,0,0,97,98,5,105,0,0,98,99,5,100,0,
        0,99,100,5,116,0,0,100,101,5,104,0,0,101,20,1,0,0,0,102,103,5,104,
        0,0,103,104,5,101,0,0,104,105,5,105,0,0,105,106,5,103,0,0,106,107,
        5,104,0,0,107,108,5,116,0,0,108,22,1,0,0,0,109,110,5,115,0,0,110,
        111,5,105,0,0,111,112,5,122,0,0,112,113,5,101,0,0,113,24,1,0,0,0,
        114,115,5,102,0,0,115,116,5,105,0,0,116,117,5,108,0,0,117,118,5,
        108,0,0,118,26,1,0,0,0,119,120,5,116,0,0,120,121,5,111,0,0,121,28,
        1,0,0,0,122,123,5,115,0,0,123,124,5,116,0,0,124,125,5,114,0,0,125,
        126,5,111,0,0,126,127,5,107,0,0,127,128,5,101,0,0,128,30,1,0,0,0,
        129,130,5,120,0,0,130,32,1,0,0,0,131,135,7,0,0,0,132,134,7,1,0,0,
        133,132,1,0,0,0,134,137,1,0,0,0,135,133,1,0,0,0,135,136,1,0,0,0,
        136,34,1,0,0,0,137,135,1,0,0,0,138,139,5,35,0,0,139,140,7,2,0,0,
        140,141,6,17,0,0,141,36,1,0,0,0,142,144,7,3,0,0,143,142,1,0,0,0,
        144,145,1,0,0,0,145,143,1,0,0,0,145,146,1,0,0,0,146,38,1,0,0,0,147,
        149,7,4,0,0,148,147,1,0,0,0,149,150,1,0,0,0,150,148,1,0,0,0,150,
        151,1,0,0,0,151,152,1,0,0,0,152,153,6,19,1,0,153,40,1,0,0,0,154,
        158,5,37,0,0,155,157,8,5,0,0,156,155,1,0,0,0,157,160,1,0,0,0,158,
        156,1,0,0,0,158,159,1,0,0,0,159,161,1,0,0,0,160,158,1,0,0,0,161,
        162,6,20,1,0,162,42,1,0,0,0,5,0,135,145,150,158,2,1,17,0,6,0,0
    ]

class colorartLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    CANVAS = 3
    COLOR = 4
    CIRCLE = 5
    RECTANGLE = 6
    SQUARE = 7
    LINE = 8
    RADIUS = 9
    WIDTH = 10
    HEIGHT = 11
    SIZE = 12
    FILL = 13
    TO = 14
    STROKE = 15
    X = 16
    VAR = 17
    HEXCOLOR = 18
    INT = 19
    WS = 20
    COMMENT = 21

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'='", "'canvas'", "'color'", "'circle'", "'rectangle'", 
            "'square'", "'line'", "'radius'", "'width'", "'height'", "'size'", 
            "'fill'", "'to'", "'stroke'", "'x'" ]

    symbolicNames = [ "<INVALID>",
            "CANVAS", "COLOR", "CIRCLE", "RECTANGLE", "SQUARE", "LINE", 
            "RADIUS", "WIDTH", "HEIGHT", "SIZE", "FILL", "TO", "STROKE", 
            "X", "VAR", "HEXCOLOR", "INT", "WS", "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "CANVAS", "COLOR", "CIRCLE", "RECTANGLE", 
                  "SQUARE", "LINE", "RADIUS", "WIDTH", "HEIGHT", "SIZE", 
                  "FILL", "TO", "STROKE", "X", "VAR", "HEXCOLOR", "INT", 
                  "WS", "COMMENT" ]

    grammarFileName = "colorart.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[17] = self.HEXCOLOR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def HEXCOLOR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            6
     


